// Generated by dts-bundle-generator v8.0.1

export type PlayerOptions = {
	url: string;
	container: HTMLElement;
	width?: string;
	height?: string;
	autoPlay?: boolean;
};
export declare function $warn(msg: string): never;
export declare const icon: {
	iconfont: string;
	"icon-bofang": string;
	"icon-shezhi": string;
	"icon-yinliang": string;
	"icon-quanping": string;
	"icon-cuowutishi": string;
};
export declare const styles: {
	"video-container": string;
	"video-wrapper": string;
	"video-controls": string;
	"video-controls-hidden": string;
	"video-progress": string;
	"video-pretime": string;
	"video-buffered": string;
	"video-completed": string;
	"video-dot": string;
	"video-dot-hidden": string;
	"video-play": string;
	"video-subplay": string;
	"video-start-pause": string;
	"video-duration": string;
	"video-duration-completed": string;
	"video-settings": string;
	"video-subsettings": string;
	"video-volume": string;
	"video-volume-progress": string;
	"video-volume-completed": string;
	"video-volume-dot": string;
	"video-fullscreen": string;
	"video-duration-all": string;
	"loading-mask": string;
	"loading-container": string;
	"loading-item": string;
	"loading-title": string;
	"error-mask": string;
	"error-container": string;
	"error-item": string;
	"error-title": string;
};
export declare class Player {
	private playerOptions;
	private container;
	private toolbar;
	constructor(options: PlayerOptions);
	init(): void;
	initComponent(): void;
	initContainer(): void;
	isTagValidate(el: HTMLElement): boolean;
}
export declare class Toolbar {
	private _template;
	constructor();
	get template(): HTMLElement;
	init(): void;
}
export declare class Progress {
	private _template;
	constructor();
	get template(): HTMLElement | string;
	init(): void;
}
export declare class Controller {
	private _template;
	constructor();
	get template(): HTMLElement | string;
	init(): void;
}
export declare class LoadingMask {
	private _template;
	constructor();
	get template(): HTMLElement | string;
	init(): void;
}
export declare class ErrorMask {
	private _template;
	constructor();
	get template(): string | HTMLElement;
	init(): void;
	generateErrorMask(): HTMLElement;
}

export {};
